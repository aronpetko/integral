#include "../chess/board.h"
#include "../chess/move_gen.h"
#include "../engine/search/search.h"
#include "tests.h"

namespace tests {

const std::vector<std::string> kBenchFens = {
    "r3k2r/2pb1ppp/2pp1q2/p7/1nP1B3/1P2P3/P2N1PPP/R2QK2R w KQkq a6 0 14",
    "4rrk1/2p1b1p1/p1p3q1/4p3/2P2n1p/1P1NR2P/PB3PP1/3R1QK1 b - - 2 24",
    "r3qbrk/6p1/2b2pPp/p3pP1Q/PpPpP2P/3P1B2/2PB3K/R5R1 w - - 16 42",
    "6k1/1R3p2/6p1/2Bp3p/3P2q1/P7/1P2rQ1K/5R2 b - - 4 44",
    "8/8/1p2k1p1/3p3p/1p1P1P1P/1P2PK2/8/8 w - - 3 54",
    "7r/2p3k1/1p1p1qp1/1P1Bp3/p1P2r1P/P7/4R3/Q4RK1 w - - 0 36",
    "r1bq1rk1/pp2b1pp/n1pp1n2/3P1p2/2P1p3/2N1P2N/PP2BPPP/R1BQ1RK1 b - - 2 10",
    "3r3k/2r4p/1p1b3q/p4P2/P2Pp3/1B2P3/3BQ1RP/6K1 w - - 3 87",
    "2r4r/1p4k1/1Pnp4/3Qb1pq/8/4BpPp/5P2/2RR1BK1 w - - 0 42",
    "4q1bk/6b1/7p/p1p4p/PNPpP2P/KN4P1/3Q4/4R3 b - - 0 37",
    "2q3r1/1r2pk2/pp3pp1/2pP3p/P1Pb1BbP/1P4Q1/R3NPP1/4R1K1 w - - 2 34",
    "1r2r2k/1b4q1/pp5p/2pPp1p1/P3Pn2/1P1B1Q1P/2R3P1/4BR1K b - - 1 37",
    "r3kbbr/pp1n1p1P/3ppnp1/q5N1/1P1pP3/P1N1B3/2P1QP2/R3KB1R b KQkq b3 0 17",
    "8/6pk/2b1Rp2/3r4/1R1B2PP/P5K1/8/2r5 b - - 16 42",
    "1r4k1/4ppb1/2n1b1qp/pB4p1/1n1BP1P1/7P/2PNQPK1/3RN3 w - - 8 29",
    "8/p2B4/PkP5/4p1pK/4Pb1p/5P2/8/8 w - - 29 68",
    "3r4/ppq1ppkp/4bnp1/2pN4/2P1P3/1P4P1/PQ3PBP/R4K2 b - - 2 20",
    "5rr1/4n2k/4q2P/P1P2n2/3B1p2/4pP2/2N1P3/1RR1K2Q w - - 1 49",
    "1r5k/2pq2p1/3p3p/p1pP4/4QP2/PP1R3P/6PK/8 w - - 1 51",
    "q5k1/5ppp/1r3bn1/1B6/P1N2P2/BQ2P1P1/5K1P/8 b - - 2 34",
    "r1b2k1r/5n2/p4q2/1ppn1Pp1/3pp1p1/NP2P3/P1PPBK2/1RQN2R1 w - - 0 22",
    "r1bqk2r/pppp1ppp/5n2/4b3/4P3/P1N5/1PP2PPP/R1BQKB1R w KQkq - 0 5",
    "r1bqr1k1/pp1p1ppp/2p5/8/3N1Q2/P2BB3/1PP2PPP/R3K2n b Q - 1 12",
    "r1bq2k1/p4r1p/1pp2pp1/3p4/1P1B3Q/P2B1N2/2P3PP/4R1K1 b - - 2 19",
    "r4qk1/6r1/1p4p1/2ppBbN1/1p5Q/P7/2P3PP/5RK1 w - - 2 25",
    "r7/6k1/1p6/2pp1p2/7Q/8/p1P2K1P/8 w - - 0 32",
    "r3k2r/ppp1pp1p/2nqb1pn/3p4/4P3/2PP4/PP1NBPPP/R2QK1NR w KQkq - 1 5",
    "3r1rk1/1pp1pn1p/p1n1q1p1/3p4/Q3P3/2P5/PP1NBPPP/4RRK1 w - - 0 12",
    "5rk1/1pp1pn1p/p3Brp1/8/1n6/5N2/PP3PPP/2R2RK1 w - - 2 20",
    "8/1p2pk1p/p1p1r1p1/3n4/8/5R2/PP3PPP/4R1K1 b - - 3 27",
    "8/4pk2/1p1r2p1/p1p4p/Pn5P/3R4/1P3PP1/4RK2 w - - 1 33",
    "8/5k2/1pnrp1p1/p1p4p/P6P/4R1PK/1P3P2/4R3 b - - 1 38",
    "8/8/1p1kp1p1/p1pr1n1p/P6P/1R4P1/1P3PK1/1R6 b - - 15 45",
    "8/8/1p1k2p1/p1prp2p/P2n3P/6P1/1P1R1PK1/4R3 b - - 5 49",
    "8/8/1p4p1/p1p2k1p/P2npP1P/4K1P1/1P6/3R4 w - - 6 54",
    "8/8/1p4p1/p1p2k1p/P2n1P1P/4K1P1/1P6/6R1 b - - 6 59",
    "8/5k2/1p4p1/p1pK3p/P2n1P1P/6P1/1P6/4R3 b - - 14 63",
    "8/1R6/1p1K1kp1/p6p/P1p2P1P/6P1/1Pn5/8 w - - 0 67",
    "1rb1rn1k/p3q1bp/2p3p1/2p1p3/2P1P2N/PP1RQNP1/1B3P2/4R1K1 b - - 4 23",
    "4rrk1/pp1n1pp1/q5p1/P1pP4/2n3P1/7P/1P3PB1/R1BQ1RK1 w - - 3 22",
    "r2qr1k1/pb1nbppp/1pn1p3/2ppP3/3P4/2PB1NN1/PP3PPP/R1BQR1K1 w - - 4 12",
    "2r2k2/8/4P1R1/1p6/8/P4K1N/7b/2B5 b - - 0 55",
    "6k1/5pp1/8/2bKP2P/2P5/p4PNb/B7/8 b - - 1 44",
    "2rqr1k1/1p3p1p/p2p2p1/P1nPb3/2B1P3/5P2/1PQ2NPP/R1R4K w - - 3 25",
    "r1b2rk1/p1q1ppbp/6p1/2Q5/8/4BP2/PPP3PP/2KR1B1R b - - 2 14",
    "6r1/5k2/p1b1r2p/1pB1p1p1/1Pp3PP/2P1R1K1/2P2P2/3R4 w - - 1 36",
    "rnbqkb1r/pppppppp/5n2/8/2PP4/8/PP2PPPP/RNBQKBNR b KQkq c3 0 2",
    "2rr2k1/1p4bp/p1q1p1p1/4Pp1n/2PB4/1PN3P1/P3Q2P/2RR2K1 w - f6 0 20",
    "3br1k1/p1pn3p/1p3n2/5pNq/2P1p3/1PN3PP/P2Q1PB1/4R1K1 w - - 0 23",
    "2r2b2/5p2/5k2/p1r1pP2/P2pB3/1P3P2/K1P3R1/7R w - - 23 93"
};

const std::vector<std::string> kSparsityFens = {
    "3kr3/3b2Q1/1qn1pr2/p1bp2N1/2n2P2/P1P3PB/3B3P/RN2K2R b - - 0 1 [0.0]",
    "8/b7/8/1P1K1k1p/2P5/5P1P/7B/8 b - - 0 1 [1.0]",
    "r2qrnk1/pp2bp1p/2n3pB/2p1p3/3pP3/P2P1NNP/1PP1QPP1/R4RK1 b - - 0 1 [0.5]",
    "1r1n3b/3r1k1p/q2Pppp1/p1P5/PpN2B2/1P4P1/5P1P/3RR1K1 w - - 0 1 [0.0]",
    "4r2k/1p3pp1/p1r3b1/4p2p/4P3/P1P2P1P/1P4PN/1R4K1 w - - 0 1 [0.0]",
    "8/7P/5p2/8/5k2/6r1/3R4/5K2 b - - 0 1 [0.5]",
    "rn1q1r2/1b2ppk1/2p2np1/pp2P2p/7P/2NB1N2/PPPQ1PP1/2KR3R b - - 0 1 [1.0]",
    "rn2qrk1/pbpp1p1p/1p2p1pb/3nP3/3P4/2P2NPP/PPQN1PB1/R3R1K1 w - - 0 1 [1.0]",
    "r1bq1rk1/1pp2ppp/n2b1n2/p2P4/2PB4/P1N4P/1P1Q1PP1/RB3RK1 b - - 0 2 [0.0]",
    "4q1k1/1Q3ppb/4r2p/3pB3/1P2nP2/r3P1P1/6BP/2RR2K1 w - - 0 2 [1.0]",
    "r1br2k1/p7/2pp3B/2p2p2/8/2PB1P2/P1K4P/R3R3 b - - 0 5 [1.0]",
    "8/B5p1/nNp4b/5k1p/P3p2P/2P3P1/8/3K4 w - - 0 1 [0.5]",
    "1r3rk1/2q2pp1/3b3p/p2N1Bn1/2pP2K1/PPP2P1P/5P2/R1BQ1R2 b - - 0 1 [1.0]",
    "4r3/1p4pk/2pN1p2/R1P1n2p/P3p2P/1P2P1P1/5PK1/8 b - - 0 1 [1.0]",
    "4r3/k5P1/6K1/6P1/8/8/8/8 w - - 0 1 [1.0]",
    "5k2/p4pp1/1p5p/2r5/P4P2/6PP/8/2R4K w - - 0 3 [0.0]",
    "r5k1/p4ppp/4bn2/8/1P6/4B3/5PPP/2R1R1K1 b - - 0 1 [1.0]",
    "5rk1/5pp1/p6p/2qn1P2/8/1R2p1P1/P6P/1K6 w - - 0 1 [0.0]",
    "8/8/4pp1k/8/5pP1/Pr3P1K/8/8 w - - 0 1 [0.0]",
    "1r4kr/8/p2p1p2/P1pP4/2Pb2B1/1P3RPp/2K4P/4R3 w - - 0 1 [1.0]",
    "8/5kp1/7p/2p2K1P/nr3P2/3Q2P1/8/8 w - - 0 1 [1.0]",
    "4k2r/3r1p2/p1Q1p1p1/3qP3/P7/6pP/2Pb2P1/3R1R1K w - - 0 1 [0.0]",
    "3r3k/7p/5p1P/1p2p1p1/p3N1P1/R1P2r2/8/K1R1Q3 b - - 0 1 [1.0]",
    "3r2k1/5pp1/2p2n1p/1p2pP2/rP2P1P1/2PBR2P/5K2/1R6 b - - 0 1 [0.5]",
    "2r2rk1/1p1b1npp/p3p3/3p1p2/P2P4/1P2qPNP/Q1B3PK/R2R4 w - - 0 1 [0.0]",
    "2r3k1/1p3p1p/p3p1pP/3b4/PP6/8/5PP1/3R2K1 b - - 0 1 [0.0]",
    "2r3k1/1p1N1p2/p3pP2/P3P3/1K2P3/2B4p/5b2/8 w - - 0 1 [0.0]",
    "5rk1/pp1b1pq1/3b2n1/4p1NQ/2rpP3/7P/PP3PP1/RB3RK1 b - - 0 1 [0.0]",
    "5r1k/6pp/3B1p2/4p1q1/P2P4/4N2P/1r3PP1/4RRK1 b - - 0 2 [0.5]",
    "8/2p2p1p/5Pp1/4k1P1/1K5P/p7/8/5R2 b - - 0 2 [1.0]",
    "6k1/p4pp1/3R4/p7/4K3/1r1N2Pb/8/8 w - - 0 1 [0.5]",
    "r3r1k1/ppn1qppp/5n2/3p4/2pP2PP/P1N1PPB1/1P1QN3/2KR3R b - - 0 1 [1.0]",
    "r2qr1k1/p1pn1ppp/1p1ppb2/8/2PP4/1P2PN2/PBQ2PPP/R4RK1 w - - 0 1 [0.5]",
    "3r2k1/ppp4p/4p1p1/5q2/3b4/5N2/PP3PPP/4R1K1 w - - 0 1 [0.0]",
    "r1bqk2r/pppp1pp1/3b3p/1B1n4/Q2P4/5N2/PP3PPP/R1B2RK1 w kq - 0 1 [0.5]",
    "2r3k1/5R2/pp4p1/2n4p/P2q2n1/1PN5/1BP4P/5Q1K b - - 0 1 [0.5]",
    "4r1k1/1p1b1p2/3p2p1/P1pP2q1/1pPb4/1Q6/1P3PN1/R2B2K1 w - - 0 1 [0.0]",
    "8/p2rp2p/1p6/2p3P1/5Bk1/P1P1Rb2/1P3P2/4K3 w - - 0 1 [0.0]",
    "8/p2k4/1p4KP/1P6/2Pp1B1r/3P4/8/8 w - - 0 1 [1.0]",
    "6k1/pp3p2/2p1b3/4P3/3r4/8/PP4KP/8 w - - 0 3 [0.0]",
    "r1b2rk1/q3bpp1/p1P2n1p/2p5/PpN5/1B3N2/1P2QPPP/R1BR2K1 b - - 0 1 [1.0]",
    "r3k1nr/ppp3pp/2nb4/1q4N1/7P/4P3/PPPP1Q2/R1BK4 b kq - 0 1 [0.0]",
    "2k4r/pp4pp/6b1/2b2pq1/8/2PpP2P/PP1N1Q2/2K1R2R w - - 0 2 [0.5]",
    "3kr3/1p6/p4R2/P1qP2n1/2P1p1P1/7p/1P5P/5B1K b - - 0 1 [0.0]",
    "2b5/4qk2/pBp5/P1P1p3/4Ppp1/2Q2P2/6P1/7K w - - 0 1 [0.0]",
    "3r2k1/5p2/1pq3pp/2b1R3/p2p1P2/P2Q2P1/1P1B1P1P/6K1 w - - 0 1 [0.5]",
    "r2q1rk1/pbpnbppp/1p6/3p4/3P1B2/2RBPN2/PP3PPP/3Q1RK1 b - - 0 1 [0.0]",
    "8/8/4k1p1/5p1p/2r2P1P/5PK1/8/8 w - - 0 1 [0.0]",
    "5bk1/5rp1/pn4Np/2p5/4RB2/2P4P/r4PP1/3R2K1 w - - 0 1 [1.0]",
    "3qkb1r/p2p1p2/b4n2/2p1nN1p/1p1p2p1/6P1/PPPBNPBP/R2Q1RK1 b - - 0 1 [1.0]",
    "7B/1k1n1r2/p1pnr1RR/6P1/1P5K/4pB2/5P2/8 b - - 0 1 [0.0]",
    "r3k2r/pp3pp1/4p1n1/4n2p/4R2P/2P5/PP3PP1/RN4K1 b kq - 0 2 [0.0]",
    "rnbqr1k1/1p5n/p2p2pp/3P1p2/P1NpP3/2NB1P2/1P4PP/R2QK2R w KQ - 0 1 [1.0]",
    "8/8/5kp1/6p1/2B3P1/p6P/1b3P2/5K2 w - - 0 1 [0.5]",
    "4k3/8/2n2p2/1P6/8/2N4B/5P1P/6K1 b - - 0 1 [1.0]",
    "8/2PR2bk/2r3p1/1p2p2p/7P/6P1/5BK1/8 b - - 0 1 [0.5]",
    "8/7p/3p2p1/1p1Pp1k1/8/7Q/5qPP/4r1RK w - - 0 1 [0.0]",
    "5k2/1P6/p7/8/1r6/3R1PbP/8/5BK1 w - - 0 3 [0.5]",
    "2r2rk1/1b1n1pb1/pq4pp/1p2P3/2pP1P2/6N1/PP1N1RPP/5QK1 w - - 0 1 [0.0]",
    "r3r1k1/ppp2p1p/3p1Q2/4p3/2P1P3/7P/PbP2PP1/R3K2R w KQ - 0 4 [1.0]",
    "1R6/6pk/8/3p1p2/5P2/8/2r2P1K/8 w - - 0 1 [0.5]",
    "8/4k3/5p2/pP2pBbK/7p/1P1P4/8/8 w - - 0 1 [0.5]",
    "8/7B/8/3N2p1/2k5/2p4r/4K3/8 w - - 0 1 [0.0]",
    "3r1rk1/1p4pp/2n5/p7/1p1p4/1Pn2qP1/P1R2P1P/2R1QBK1 w - - 0 1 [0.0]",
    "5rrk/1pN1b3/p6p/2P1n1q1/1P2P3/5pPP/5P2/R3R1K1 w - - 0 1 [0.0]",
    "6kr/2pb3q/1p1p1p1r/pP1Pp1p1/2P1PnP1/P3NBB1/3R3P/4Q1K1 b - - 0 1 [0.0]",
    "r1bq1rk1/2p2ppn/p2p3p/1p1P4/4PBP1/2N4P/PPP1B3/1K1RQ3 b - - 0 2 [0.0]",
    "7k/ppp3b1/3p3p/3P1rpQ/2P1p3/1P5P/P3N1P1/R5K1 w - - 0 2 [1.0]",
    "8/2r2pk1/4p2p/p7/8/K7/1R3P2/8 w - - 0 1 [0.0]",
    "r1br2k1/ppp1qpbp/4p1p1/8/P1P1QB2/2Pn3P/1P3PP1/RN3RK1 w - - 0 1 [0.0]",
    "4b3/4Q3/1k1p4/2pP1K2/1pP5/3B2P1/8/2q5 b - - 0 1 [1.0]",
    "2k3r1/3pnp1r/pp1bpB2/2p5/2B1N3/3P3P/PPP2K2/4RR2 b - - 0 1 [1.0]",
    "7R/1p3pp1/4p1b1/8/2P1kb2/8/1PP2PK1/8 w - - 0 3 [0.0]",
    "3r4/1b2k3/p3ppB1/2Pp2p1/1P4P1/8/P4P1r/1R1R1K2 w - - 0 1 [0.5]",
    "6k1/p1Bn1p2/2b4p/6p1/4P3/5PP1/P1R4P/5BK1 b - - 0 1 [1.0]",
    "2r2rk1/1p3ppp/p4q2/8/2bnP2P/2NB4/PPP5/1K1R3R w - - 0 1 [0.0]",
    "B5k1/4p2p/3pp1p1/1P6/1R1b4/3P2PP/3QPP2/6K1 b - - 0 1 [1.0]",
    "r4rk1/5ppp/p7/8/2B5/5q2/PP3P1P/2RR2K1 w - - 0 3 [0.0]",
    "5k2/8/6p1/r5Pp/8/4pP2/8/2R4K w - - 0 2 [1.0]",
    "4R3/1pr2ppk/p7/P2P4/1q5p/7P/5P2/Q4K2 w - - 0 1 [0.5]",
    "8/5p1k/5P1p/5R2/p3P1P1/2P4P/PP2B3/4R1K1 b - - 0 1 [1.0]",
    "2rr3k/pp3p1p/2q5/8/5P2/2nPp1PP/PQ2P3/2R2RK1 w - - 0 1 [0.0]",
    "5n2/2k3b1/p2p3p/1ppBp1p1/4P1N1/P3B1PP/1PP5/6K1 b - - 0 5 [1.0]",
    "r2qr1k1/1bpp1p2/1pn3p1/p7/2P1P1p1/P1N3P1/1PQB2PP/2R2RK1 b - - 0 1 [1.0]",
    "3n1Q2/7k/6b1/8/3B4/P3K2P/8/8 b - - 0 1 [1.0]",
    "4k3/1R6/3P1np1/8/2N1pp1p/7P/5KP1/8 b - - 0 1 [1.0]",
    "8/5p2/p5kr/2pPpp2/P1P5/1r6/1P2R1KP/6R1 w - - 0 3 [0.0]",
    "1qb1rbk1/7p/p4p2/1p1P1Pp1/2pB4/6P1/P4PBP/1Q1R2K1 b - - 0 1 [0.5]",
    "2r5/kp5Q/p1r2p2/4p3/3pP1P1/P2P3P/1Pq2P2/3RK1R1 w - - 0 1 [0.0]",
    "r3r3/1pq2pk1/p1pb1pBp/1P1p4/3P2b1/2N1PN2/P1Q2PPP/1R3RK1 w - - 0 1 [1.0]",
    "8/1R4p1/p7/8/5P2/2k3Kp/8/7r b - - 0 1 [0.0]",
    "5r2/5k1p/p3p3/6P1/1P5P/P2PK1P1/2R5/8 b - - 0 1 [1.0]",
    "8/6k1/7p/8/8/7P/2q5/K7 b - - 0 1 [0.0]",
    "r1b1k2r/p1pp1p1p/1p2p3/3n4/1b1P1P2/1P5q/P1P1KR1P/RNB5 b kq - 0 1 [0.0]",
    "8/2Q5/4p3/3k2P1/8/7p/8/3K2br w - - 0 1 [1.0]",
    "r1b2rk1/1pQ2p1p/p5p1/3PN1qn/8/2N4P/PPPR2P1/2K4R b - - 0 1 [1.0]",
    "r1b2rk1/ppp2pp1/3p3p/6q1/2PNP1n1/2PB4/P2Q1PPP/2KR3R b - - 0 2 [0.0]",
    "8/4k1pr/1r1p1n2/4p1R1/p3P3/P1PPP3/1P6/2K1R3 w - - 0 1 [0.0]",
    "2n3k1/5pp1/1qp1p1p1/pN2P3/1r3PP1/1P1Q3P/7K/3R4 w - - 0 2 [0.5]",
    "8/2K5/8/2R5/4k3/Pp6/3r4/8 w - - 0 1 [0.5]",
    "5k2/2q2ppp/p3p1b1/bp1pP3/2rN1P2/2P5/P2Q2PP/3R1R1K w - - 0 2 [1.0]"};

void BenchSuite(int depth, bool sparsity_fens) {
  Board board;
  search::Searcher searcher(board);
  searcher.ResizeHash(16);

  auto bench_thread = std::make_unique<search::Thread>(0);

  U64 nodes = 0, elapsed = 0;
  const auto fens = sparsity_fens ? kSparsityFens : kBenchFens;
  for (const auto &position : fens) {
    board.SetFromFen(position);
    searcher.NewGame(false);

    nodes += searcher.Bench(bench_thread, depth);
    elapsed += searcher.GetTimeManagement().TimeElapsed();
  }

  fmt::println("{} nodes {} nps",
               nodes,
               static_cast<U64>(nodes * 1000 / std::max<U64>(elapsed, 1)));
}

}  // namespace tests